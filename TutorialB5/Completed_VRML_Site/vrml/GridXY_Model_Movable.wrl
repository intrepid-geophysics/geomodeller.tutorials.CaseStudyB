#VRML V2.0 utf8

DEF GridLocation Transform {

  children [

    Group {

      children [

	DEF TextLabelTouchSensor TouchSensor {

	}

	### Hint: need TouchSensor 'description' provided as user hint

	Transform {

	  translation 10000.0 20000.0 -1000.0

	  children [

	    Billboard {

	      children [

		Shape {

		  geometry DEF CenterText Text {

		    string [ "origin" ]

		    fontStyle DEF LABEL_FONT FontStyle {

		      family [ "SANS" ]

		      justify [ "MIDDLE" "MIDDLE" ]

		      size 110.0

		    }

		  }

		}

	      ]

	    }

	  ]

	}

	Transform {

	  translation 14000.0 23700.0 -1000.0

	  children [

	    Billboard {

	      children [

		Shape {

		  geometry DEF UpperRightText Text {

		    	 string [ "(4000.0,3700.0,0.0)" ] 

		    fontStyle USE LABEL_FONT

		  }

		}

	      ]

	    }

	  ]

	}

	Transform {

	  translation 10000.0 23700.0 -1000.0

	  children [

	    Billboard {

	      children [

		Shape {

		  geometry DEF UpperLeftText Text {

		    string [ "(0.0,3700.0,0.0)" ] 

		    fontStyle USE LABEL_FONT

		  }

		}

	      ]

	    }

	  ]

	}

	Transform {

	  translation 10000.0 20000.0 -1000.0

	  children [

	    Billboard {

	      children [

		Shape {

		  geometry DEF LowerLeftText Text {

		    string [ "(0.0,0.0,0.0)" ] 

		    fontStyle USE LABEL_FONT

		  }

		}

	      ]

	    }

	  ]

	}

	Transform {

	  translation 4000.0 0.0 0.0

	  children [

	    Billboard {

	      children [

		Shape {

		  geometry DEF LowerRightText Text {

		    string [ "(4000.0,0.0,0.0)" ] 

		    fontStyle USE LABEL_FONT

		  }

		}

	      ]

	    }

	  ]

	}

      ]

    }

    DEF GridOnOffSwitch Switch {

      whichChoice 0

      choice [

	Transform {

#	  rotation 1 0 0 1.5708

	  children [

	    DEF GridSensor PlaneSensor {

	    }

	    DEF LineSensorAxisZ Script {

	      eventIn SFVec3f set_translation

	      eventOut SFVec3f translation_changed

	      url [ "javascript:

		

		// local-coordinates vertical Y is world-coordinates axis Z

		function set_translation (location, timeStamp) {

 		  translation_changed [ 0 ] = 0;

 		  translation_changed [ 1 ] = 0;

	  translation_changed [ 2 ] = location.y; 

		  // print ('location=' + location + ', translation_changed=' + translation_changed);

		}

		" ]

	    }

	    DEF LinesAlignedAlongZ Shape {

	      geometry IndexedLineSet {

		colorIndex [  1 0 0 0 0 2 0 0 0 0 1 0 0 0 0 2 0 1 ]

		colorPerVertex FALSE

		coordIndex [

		  0 18 -1,
		  1 19 -1,
		  2 20 -1,
		  3 21 -1,
		  4 22 -1,
		  5 23 -1,
		  6 24 -1,
		  7 25 -1,
		  8 26 -1,
		  9 27 -1,
		  10 28 -1,
		  11 29 -1,
		  12 30 -1,
		  13 31 -1,
		  14 32 -1,
		  15 33 -1,
		  16 34 -1,
		  17 35 -1,


	          ]

		coord DEF EndPoints Coordinate {

		  point [

		    9750.0 23750.0 -1000.0
		    10000.0 23750.0 -1000.0
		    10250.0 23750.0 -1000.0
		    10500.0 23750.0 -1000.0
		    10750.0 23750.0 -1000.0
		    11000.0 23750.0 -1000.0
		    11250.0 23750.0 -1000.0
		    11500.0 23750.0 -1000.0
		    11750.0 23750.0 -1000.0
		    12000.0 23750.0 -1000.0
		    12250.0 23750.0 -1000.0
		    12500.0 23750.0 -1000.0
		    12750.0 23750.0 -1000.0
		    13000.0 23750.0 -1000.0
		    13250.0 23750.0 -1000.0
		    13500.0 23750.0 -1000.0
		    13750.0 23750.0 -1000.0
		    14000.0 23750.0 -1000.0
		    9750.0 19750.0 -1000.0
		    10000.0 19750.0 -1000.0
		    10250.0 19750.0 -1000.0
		    10500.0 19750.0 -1000.0
		    10750.0 19750.0 -1000.0
		    11000.0 19750.0 -1000.0
		    11250.0 19750.0 -1000.0
		    11500.0 19750.0 -1000.0
		    11750.0 19750.0 -1000.0
		    12000.0 19750.0 -1000.0
		    12250.0 19750.0 -1000.0
		    12500.0 19750.0 -1000.0
		    12750.0 19750.0 -1000.0
		    13000.0 19750.0 -1000.0
		    13250.0 19750.0 -1000.0
		    13500.0 19750.0 -1000.0
		    13750.0 19750.0 -1000.0
		    14000.0 19750.0 -1000.0


		  ]

		}

		color Color {

		  color [ 0.4 0.4 0.4, 0.8 0.2 0, 0.4 0.1 0.05 ]

		}

	      }

	    }

	    DEF LinesAlignedAlongX Shape {

	      geometry IndexedLineSet {

		colorIndex [  2 0 0 0 0 2 0 0 0 0 2 0 0 0 0 2 1 ]

		colorPerVertex FALSE

		coordIndex [

		  0 17 -1,
		  1 18 -1,
		  2 19 -1,
		  3 20 -1,
		  4 21 -1,
		  5 22 -1,
		  6 23 -1,
		  7 24 -1,
		  8 25 -1,
		  9 26 -1,
		  10 27 -1,
		  11 28 -1,
		  12 29 -1,
		  13 30 -1,
		  14 31 -1,
		  15 32 -1,
		  16 33 -1,


	          ]

		coord DEF EndPoints Coordinate {

		  point [

		    14000.0 19750.0 -1000.0
		    14000.0 20000.0 -1000.0
		    14000.0 20250.0 -1000.0
		    14000.0 20500.0 -1000.0
		    14000.0 20750.0 -1000.0
		    14000.0 21000.0 -1000.0
		    14000.0 21250.0 -1000.0
		    14000.0 21500.0 -1000.0
		    14000.0 21750.0 -1000.0
		    14000.0 22000.0 -1000.0
		    14000.0 22250.0 -1000.0
		    14000.0 22500.0 -1000.0
		    14000.0 22750.0 -1000.0
		    14000.0 23000.0 -1000.0
		    14000.0 23250.0 -1000.0
		    14000.0 23500.0 -1000.0
		    14000.0 23750.0 -1000.0
		    9750.0 19750.0 -1000.0
		    9750.0 20000.0 -1000.0
		    9750.0 20250.0 -1000.0
		    9750.0 20500.0 -1000.0
		    9750.0 20750.0 -1000.0
		    9750.0 21000.0 -1000.0
		    9750.0 21250.0 -1000.0
		    9750.0 21500.0 -1000.0
		    9750.0 21750.0 -1000.0
		    9750.0 22000.0 -1000.0
		    9750.0 22250.0 -1000.0
		    9750.0 22500.0 -1000.0
		    9750.0 22750.0 -1000.0
		    9750.0 23000.0 -1000.0
		    9750.0 23250.0 -1000.0
		    9750.0 23500.0 -1000.0
		    9750.0 23750.0 -1000.0


		  ]

		}

		color Color {

		  color [ 0.4 0.4 0.4, 0.8 0.2 0, 0.4 0.1 0.05 ]

		}

	      }

	    }	

	    Transform {

	      rotation 1 0 0 1.5708

	      translation 12000.0 19750.0 -1000.0

	      children [

		Billboard {

		  children [

		    Shape {

		      geometry Text {

			string [ "South" ]

			fontStyle USE LABEL_FONT

		      }

		      appearance DEF LABEL_APPEARANCE Appearance {

			material Material {

			  diffuseColor 1 1 .3

			  emissiveColor .33 .33 .1

			}

		      }

		    }

		  ]

		}

	      ]

	    }

	    Transform {

	      rotation 1 0 0 1.5708

	      translation 9750.0 21850.0 -1000.0

	      children [

		Billboard {

		  children [

		    Shape {

		      geometry Text {

			string [ "East" ]

			fontStyle USE LABEL_FONT

		      }

		      appearance USE LABEL_APPEARANCE

		    }

		  ]

		}

	      ]

	    }

	  ]

	}

      ]

    }

  ]

}

DEF CenterTextScript Script {

  eventIn SFVec3f set_translation

  eventOut MFString value

  url [ "javascript:

    // eventOut 'value' is an MFString array to match type of destination Text node's string field

    

    function initialize ( ) {

      // print ('Grid script initialized, print function works');

      // trace ('Grid script initialized, trace function works');

    }

    

    function set_translation (location, timeStamp) {

      numberOfPlaces = 1000;

      value[ 0 ] = (Math.round (location.x * numberOfPlaces) / numberOfPlaces) + ' '

      + (Math.round (location.y * numberOfPlaces) / numberOfPlaces) + ' '

      + (Math.round (location.z * numberOfPlaces) / numberOfPlaces);

      // print ('location=' + location);

    }

    " ]

}

DEF UpperRightTextScript Script {

  eventIn SFVec3f set_translation

  eventOut MFString value

  url [ "javascript:

    

    function set_translation (location, timeStamp) {

      numberOfPlaces = 1000;

      value[ 0 ] = 4000.0 + ' ' + 3700.0 + ' ' + ((Math.round (location.z * numberOfPlaces) / numberOfPlaces) - -1000.0);

    }

    " ]

}

DEF UpperLeftTextScript Script {

  eventIn SFVec3f set_translation

  eventOut MFString value

  url [ "javascript:

    

    function set_translation (location, timeStamp) {

      numberOfPlaces = 1000;

      value[ 0 ] = 4000.0 + ' ' + 3700.0 + ' ' + ((Math.round (location.z * numberOfPlaces) / numberOfPlaces) - -1000.0);

    }

    " ]

}

DEF LowerLeftTextScript Script {

  eventIn SFVec3f set_translation

  eventOut MFString value

  url [ "javascript:

    

    function set_translation (location, timeStamp) {

      numberOfPlaces = 1000;

      value[ 0 ] = 4000.0 + ' ' + 0.0 + ' ' + ((Math.round (location.z * numberOfPlaces) / numberOfPlaces) - -1000.0);

    }

    " ]

}

DEF LowerRightTextScript Script {

  eventIn SFVec3f set_translation

  eventOut MFString value

  url [ "javascript:

    

    function set_translation (location, timeStamp) {

      numberOfPlaces = 1000;

      value[ 0 ] = 4000.0 + ' ' + 0.0 + ' ' + ((Math.round (location.z * numberOfPlaces) / numberOfPlaces) - -1000.0);

    }

    " ]

}

DEF SwitchTextOnOffScript Script {

  eventIn SFBool isTouched

  eventOut SFInt32 touchChoice

  url [ "javascript:

    

    function isTouched (value, timeStamp) {

      if (value == true)

      touchChoice = -1;

      else touchChoice = 0;

    }

    " ]

}

ROUTE GridSensor.translation_changed TO LineSensorAxisZ.set_translation

# Send changed position to text-construction scripts

ROUTE LineSensorAxisZ.translation_changed TO GridLocation.set_translation

ROUTE LineSensorAxisZ.translation_changed TO CenterTextScript.set_translation

ROUTE LineSensorAxisZ.translation_changed TO UpperRightTextScript.set_translation

ROUTE LineSensorAxisZ.translation_changed TO UpperLeftTextScript.set_translation

ROUTE LineSensorAxisZ.translation_changed TO LowerLeftTextScript.set_translation

ROUTE LineSensorAxisZ.translation_changed TO LowerRightTextScript.set_translation

# Send text showing changed position to output Text nodes

ROUTE CenterTextScript.value TO CenterText.string

ROUTE UpperRightTextScript.value TO UpperRightText.string

ROUTE UpperLeftTextScript.value TO UpperLeftText.string

ROUTE LowerLeftTextScript.value TO LowerLeftText.string

ROUTE LowerRightTextScript.value TO LowerRightText.string

# Enable/disable grid visibility based on user touching coordinate labels

ROUTE TextLabelTouchSensor.isActive TO SwitchTextOnOffScript.isTouched

ROUTE SwitchTextOnOffScript.touchChoice TO GridOnOffSwitch.whichChoice

